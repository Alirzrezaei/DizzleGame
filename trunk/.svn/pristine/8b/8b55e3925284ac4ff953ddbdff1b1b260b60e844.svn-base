/*
 * This application is a game project developed by Alireza Rezaei ITE102772
 * The purpose is for Advanced Programming course.
 */
package logic;

import static java.util.Collections.list;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author Rezaei
 */
public class Board {

    LevelReader board;
    private Cell[][] field;
    private int level;
    private Scores[] scores;

    Board(LevelReader board, int level) {
        this.board = board;
        field = new Cell[board.getField().length][board.getField()[0].length];
        setToField(board);
        field = rotateBoard();
        initPoints(level);
        
    }

    public Cell[][] getField() {
        return field;
    }

    protected LevelReader getBoard() {
        return this.board;
    }
    public Scores[] getPointTable(){
        return scores;
    }
    private void setToField(LevelReader board) {

        for (int i = 0; i < board.getField().length; i++) {
            for (int j = 0; j < board.getField()[i].length; j++) {
                boolean isCross = false;

                if (board.getField()[i][j] != null && board.getField()[i][j] == 0) {
                    isCross = true;
                    field[i][j] = new Cell(board.getField()[i][j], isCross, ObjectTypes.noType, 0);
                } else {
                    if (board.getField()[i][j] != null) {
                        Position pos = new Position(j, i);
                        ObjectTypes type = isObject(board, pos);
                        int point = getPoint(board, pos, type);

                        field[i][j] = new Cell(board.getField()[i][j], isCross, type, point);
                    }
                }

            }
        }
  
    }

    protected ObjectTypes isObject(LevelReader board, Position pos) {
        ObjectTypes type = ObjectTypes.noType;
        
        if (type == ObjectTypes.noType) {
            type = isJewel(board, pos);
        }
        
        if (type == ObjectTypes.noType) {
            type = isBomb(board, pos);
        }
        if (type == ObjectTypes.noType) {
            type = isPuzzle(board, pos);
        }
        if (type == ObjectTypes.noType) {
            type = isFlag(board, pos);
        }
        if (type == ObjectTypes.noType) {
            type = isKey(board, pos);
        }
        if (type == ObjectTypes.noType) {
            type = isKeyhole(board, pos);
        }
        if (type == ObjectTypes.noType) {
            type = isRocket(board, pos);
        }
        if (type == ObjectTypes.noType) {
            type = isPlanet(board, pos);
        }
        return type;
    }

    private ObjectTypes isJewel(LevelReader board, Position pos) {
        ObjectTypes type = ObjectTypes.noType;
        for (int i = 0; i < board.getJewels().length && type == ObjectTypes.noType; i++) {
            for (int j = 0; j < board.getJewels()[i].getPositions().length && type == ObjectTypes.noType; j++) {
                if (board.getJewels()[i].getPositions()[j].equals(pos)) {
                        type = ObjectTypes.jewel;       
                }
            }
        }
        return type;
    }

    protected ObjectTypes isBomb(LevelReader board, Position pos) {
        ObjectTypes type = ObjectTypes.noType;
        for (int i = 0; i < board.getBombs().getPositions().length && type == ObjectTypes.noType; i++) {
            if (board.getBombs().getPositions()[i].equals(pos)) {
                type = ObjectTypes.bomb;
            }
        }
        return type;
    }

    private ObjectTypes isPuzzle(LevelReader board, Position pos) {
        ObjectTypes type = ObjectTypes.noType;
        for (int i = 0; i < board.getPuzzles().length && type == ObjectTypes.noType; i++) {
            for (int j = 0; j < board.getPuzzles()[i].getPositions().length && type == ObjectTypes.noType; j++) {
                if (board.getPuzzles()[i].getPositions()[j].equals(pos)) {
                        type = ObjectTypes.puzzle;
                }
            }
        }
        return type;
    }

    private ObjectTypes isKey(LevelReader board, Position pos) {
        ObjectTypes type = ObjectTypes.noType;
        for (int i = 0; i < board.getKeys().length && type == ObjectTypes.noType; i++) {
            if (board.getKeys()[i].getPosition().equals(pos)) {
               
                    type = ObjectTypes.key;
                
            }
        }
        return type;
    }

    private ObjectTypes isKeyhole(LevelReader board, Position pos) {
        ObjectTypes type = ObjectTypes.noType;
        for (int i = 0; i < board.getKeys().length && type == ObjectTypes.noType; i++) {
            for (int j = 0; j < board.getKeys()[i].getHoles().length; j++) {
                if (board.getKeys()[i].getHoles()[j].equals(pos)) {
                   
                        type = ObjectTypes.keyhole;
                    
                }
            }
        }
        return type;
    }

    private ObjectTypes isFlag(LevelReader board, Position pos) {
        //assert(board.getFlag() != null);

        ObjectTypes type = ObjectTypes.noType;

        if (board.getFlag() != null && board.getFlag().getPosition().equals(pos)) {
            type = ObjectTypes.flag;
        }

        return type;
    }

    private ObjectTypes isRocket(LevelReader board, Position pos) {
        //assert (board.getRocket() != null);

        ObjectTypes type = ObjectTypes.noType;

        if (board.getRocket() != null && board.getRocket().equals(pos)) {
            type = ObjectTypes.rocket;
        }

        return type;
    }

    private ObjectTypes isPlanet(LevelReader board, Position pos) {
        //assert (board.getRocket() != null);

        ObjectTypes type = ObjectTypes.noType;

        if (board.getRocket() != null && board.getPlanet().equals(pos)) {
            type = ObjectTypes.planet;
        }

        return type;
    }

    protected boolean isValidPos(Position pos) {
        return isValidX(pos.getX()) && isValidY(pos.getY()) && this.field[pos.getX()][pos.getY()] != null;
    }

    private boolean isValidX(int x) {
        return x >= 0 && x < this.field.length;
    }

    private boolean isValidY(int y) {
        return y >= 0 && y < this.field[0].length;
    }

    private int getPoint(LevelReader board, Position pos, ObjectTypes type) {
        int point = 0;
        if (type == ObjectTypes.puzzle) {
            point = board.getPuzzles()[0].getPoints();
        } 
        
        if(type == ObjectTypes.bomb){
            point = board.getBombs().getPoints();
        }
        
        if(type == ObjectTypes.jewel){
            for (int i = 0; i < board.getJewels().length; i++) {
                for (int j = 0; j < board.getJewels()[i].getPositions().length; j++) {
 
                    if(board.getJewels()[i].getPositions()[j].equals(pos)){
                        point = board.getJewels()[i].getPoints();
                    }
                }
            }
        }
       
        if(type == ObjectTypes.flag){
            point = board.getFlag().getPoints()[0];
        }
        
        return point;
    }
    void print(){
        for (int i = 0; i < field[0].length; i++) {
            for (int j = 0; j < field.length; j++) {
                if(field[j][i] != null){
                    System.out.print(field[j][i].getValue() + ", ");
                }
                
            }
            System.out.println("");
        }
         for (int i = 0; i < field[0].length; i++) {
            for (int j = 0; j < field.length; j++) {
                if(field[j][i] != null){
                System.out.print(field[j][i].getObject()+ ", ");
                }
            }
            System.out.println("");
        }
         for (int i = 0; i < field[0].length; i++) {
            for (int j = 0; j < field.length; j++) {
                if(field[j][i] != null){
                System.out.print(field[j][i].getPoint()+ ", ");
                }
            }
            System.out.println("");
        }
    }
    /**
     * this method is rotating the board based on what user see on GUI
     * @return baord of cells
     */
    private Cell[][] rotateBoard(){
        Cell[][] temp = new Cell[field[0].length][field.length];
        for (int i = 0; i < field.length; i++) {
            for (int j = 0; j < field[0].length; j++) {
                temp[j][i] = field[i][j];
            }
        }
        return temp;
    }
    /**
     * this method is checking all the baord and if there is occupied cell will 
     * return true
     * @return true if a cell is occupied
     */
    protected boolean ifOccupied(){
        boolean occupied = false;
        
         for (int i = 0; i < field.length && !occupied; i++) {
            for (int j = 0; j < field[0].length && !occupied; j++) {
                if(field[i][j] != null && field[i][j].isOccupied()){
                    occupied = true;
                }
            }
        }
         return occupied;
    }
    protected boolean inClosed(){
        boolean inClosed = true;
        
         for (int i = 0; i < field.length && inClosed; i++) {
            for (int j = 0; j < field[0].length && inClosed; j++) {
                if(field[i][j] != null && field[i][j].isOccupied()){
                    Position pos = new Position(i, j);
                    Position [] neighbors = pos.getNeighbors();
                    for (int k = 0; k < neighbors.length; k++) {
                        if(isValidPos(neighbors[k]) && !field[neighbors[k].getX()][neighbors[k].getY()].isCrossed()
                                && !field[neighbors[k].getX()][neighbors[k].getY()].isOccupied()){
                            inClosed = false;
                        }
                    }
                    
                }
            }
        }
        
        return inClosed;
    }
    
    protected boolean contiain(List<Position> list, Position pos){
        boolean inList = false;
        for (int i = 0; i < list.size() && !inList; i++) {
            if(list.get(i).equals(pos)){
                inList = true;
            }
        }
        return inList;
    }
    protected List<Position> highlightList(List<Integer> dices){
        List<Position> temp = new LinkedList<>();
        if(ifOccupied() && !inClosed()){
            temp = neighborWithOccupied(dices);
        }else{
            temp = neighborWithCrossed(dices);
        }
        return temp;
    }
    private List<Position> neighborWithOccupied(List<Integer> dices){
        List<Position> temp = new LinkedList<>();
        
        for (int i = 0; i < field.length; i++) {
            for (int j = 0; j < field[i].length; j++) {
                if(field[i][j] != null && field[i][j].isOccupied()){
                    Position pos = new Position(i, j);
                    Position [] neighbors = pos.getNeighbors();
                    for (int k = 0; k < neighbors.length; k++) {
                        if(isValidPos(neighbors[k]) && !field[neighbors[k].getX()][neighbors[k].getY()].isCrossed()
                                && !field[neighbors[k].getX()][neighbors[k].getY()].isOccupied() && 
                                dices.contains(field[neighbors[k].getX()][neighbors[k].getY()].getValue())){
                            temp.add(neighbors[k]);
                        }
                    }
                    
                }
            }
        }
        return temp;
    }
    private List<Position> neighborWithCrossed(List<Integer> dices){
        List<Position> temp = new LinkedList<>();
        
        for (int i = 0; i < field.length; i++) {
            for (int j = 0; j < field[i].length; j++) {
                if(field[i][j] != null && field[i][j].isCrossed()){
                    Position pos = new Position(i, j);
                    Position [] neighbors = pos.getNeighbors();
                    for (int k = 0; k < neighbors.length; k++) {
                        if(isValidPos(neighbors[k]) && !field[neighbors[k].getX()][neighbors[k].getY()].isCrossed()
                                && !field[neighbors[k].getX()][neighbors[k].getY()].isOccupied() && 
                                dices.contains(field[neighbors[k].getX()][neighbors[k].getY()].getValue())){
                            temp.add(neighbors[k]);
                        }
                    }
                    
                }
            }
        }
        return temp;
    }
    
    private void initPoints(int level){
        if(level == 1){
            fstLevelPointTable();
        }else if(level == 2){
            sndLevelPointTable();
        }else{
            thrdLevelPointTable();
        }
    }
    private void fstLevelPointTable(){
        scores = new Scores[5];
        scores[0] = new Scores(0, ObjectTypes.jewel);
        scores[1] = new Scores(0, ObjectTypes.horizontalLine);
        scores[3] = new Scores(0, ObjectTypes.verticalLine);
        scores[3] = new Scores(0, ObjectTypes.puzzle);
        scores[4] = new Scores(0, ObjectTypes.bomb);
        
        
    }
    private void sndLevelPointTable(){
         scores = new Scores[7];
         scores[0] = new Scores(0, ObjectTypes.jewel);
        scores[1] = new Scores(0, ObjectTypes.jewel);
        scores[2] = new Scores(0, ObjectTypes.horizontalLine);
        scores[3] = new Scores(0, ObjectTypes.verticalLine);
        scores[4] = new Scores(0, ObjectTypes.puzzle);
        scores[5] = new Scores(0, ObjectTypes.puzzle);
        scores[6] = new Scores(0, ObjectTypes.bomb);
    }
    private void thrdLevelPointTable(){
        
         scores = new Scores[8];
        scores[0] = new Scores(0, ObjectTypes.jewel);
        scores[1] = new Scores(0, ObjectTypes.jewel);
        scores[3] = new Scores(0, ObjectTypes.jewel);
        scores[3] = new Scores(0, ObjectTypes.horizontalLine);
        scores[4] = new Scores(0, ObjectTypes.verticalLine);
        scores[5] = new Scores(0, ObjectTypes.puzzle);
        scores[6] = new Scores(0, ObjectTypes.flag);
        scores[7] = new Scores(0, ObjectTypes.bomb);
    }
    
    protected int isHorizontalLine(Position pos){
        int point = 0;
        
        for (int k = 0; k < board.getHorizontalLines().length; k++) {
            if(pos.getY() == board.getHorizontalLines()[k].getPositions()[0].getY()){
                boolean isHorizontal = true;
                for (int j = 0; j < field.length && isHorizontal; j++) {
                    Position temp = new Position(j, pos.getY());
                    if(field[j][pos.getY()] != null && !field[j][pos.getY()].isCrossed() && 
                            !field[j][pos.getY()].isOccupied() && !pos.equals(temp)){
                        isHorizontal = false;
                    }    
                }
                if(isHorizontal){
                    point = board.getHorizontalLines()[k].getPoints();
                }
            }
        }
        
        return point;
    }
    protected int isVerticalLine(Position pos){
        int point = 0;
        
        for (int k = 0; k < board.getVerticalLines().length; k++) {
            if(pos.getX() == board.getVerticalLines()[k].getPositions()[0].getX()){
                boolean isVertical = true;
                for (int j = 0; j < field[pos.getX()].length && isVertical; j++) {
                    Position temp = new Position(pos.getX(), j);
                    if(field[pos.getX()][j] != null && !field[pos.getX()][j].isCrossed() && 
                            !field[pos.getX()][j].isOccupied() && !pos.equals(temp)){
                        isVertical = false;
                    }    
                }
                if(isVertical){
                    point = board.getVerticalLines()[k].getPoints();
                }
            }
        }
        
        return point;
    }
    
    protected boolean isBothLines(Position pos){
        
        return isHorizontalLine(pos) > 0 && isVerticalLine(pos) > 0;
    }
    
}
