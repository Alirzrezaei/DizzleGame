/*
 * This application is a game project developed by Alireza Rezaei ITE102772
 * The purpose is for Advanced Programming course.
 */
package gui;

import java.util.HashMap;
import java.util.List;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.effect.BlendMode;
import javafx.scene.effect.ColorAdjust;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.TextAlignment;
import javax.swing.text.StyledEditorKit;
import logic.GUIConnector;
import logic.LevelReader;
import logic.ObjectTypes;
import logic.Position;
import logic.boardObjects;

/**
 *
 * @author Alireza
 */
public class JavaFXGUI implements GUIConnector {

    private GridPane grdPnHuman;
    private GridPane grdPnBot1;
    private GridPane grdPnBot2;
    private GridPane grdPnBot3;
    private GridPane grdPnDices;
    private GridPane grdPnPoints;
    
    private Pane pnHuman;
    private Pane pnBot1;
    private Pane pnBot2;
    private Pane pnBot3;

    private ImageView[][] imgVwHuman;
    private ImageView[][] imgVwBot1;
    private ImageView[][] imgVwBot2;
    private ImageView[][] imgVwBot3;

    private Group[][] grpHuman;
    private Group[][] grpBot1;
    private Group[][] grpBot2;
    private Group[][] grpBot3;

    private Label pnRound;
    private Label pnTurn;

    private Button btnRollAgain;
    private Button btnDropOut;
    
    private Label[] lblPoints;
    
    

    private final String path = "gui/img/";
    private final String ext = ".png";
    
    private ImageView imgVwDropOut;

    public JavaFXGUI(GridPane grdPnHuman, GridPane grdPnBot1, GridPane grdPnBot2,
            GridPane grdPnBot3, GridPane grdPnDices, Label pnRound, Label pnTurn,
            Button btnRollAgain, Button btnDropOut, Group[][] grpHuman, Group[][] grpBot1,
            Group[][] grpBot2, Group[][] grpBot3, Pane pnHuman, Pane pnBot1, Pane pnBot2, Pane pnBot3, 
            GridPane grdPnPoints) {
        this.grdPnHuman = grdPnHuman;
        this.grdPnBot1 = grdPnBot1;
        this.grdPnBot2 = grdPnBot2;
        this.grdPnBot3 = grdPnBot3;
        this.grdPnPoints = grdPnPoints;
        
        this.grpHuman = grpHuman;
        this.grpBot1 = grpBot1;
        this.grpBot2 = grpBot2;
        this.grpBot3 = grpBot3;
        
        this.pnHuman = pnHuman;
        this.pnBot1 = pnBot1;
        this.pnBot2 = pnBot2;
        this.pnBot3 = pnBot3;
        
        this.grdPnDices = grdPnDices;
        this.pnRound = pnRound;
        this.pnTurn = pnTurn;
        this.btnDropOut = btnDropOut;
        this.btnRollAgain = btnRollAgain;
        
        this.imgVwDropOut = new ImageView(path+"pen"+ext);
    }

    @Override
    public void addImgsToAllGridPanes(LevelReader levelObj, int player, int level) {
        for (int i = 0; i < player; i++) {
            if (i == 0) {
                addImgToEachGridPane(grpHuman, levelObj, grdPnHuman, imgVwHuman, level);
                addLines(levelObj, i, level);
            } else if (i == 1) {
                addImgToEachGridPane(grpBot1, levelObj, grdPnBot1, imgVwBot1, level);
                addLines(levelObj, i, level);
            } else if (i == 2) {
                addImgToEachGridPane(grpBot2, levelObj, grdPnBot2, imgVwBot2, level);
                addLines(levelObj, i, level);
            } else if (i == 3) {
                addImgToEachGridPane(grpBot3, levelObj, grdPnBot3, imgVwBot3, level);
                addLines(levelObj, i, level);
            }
        }
        
    }

    private void addImgToEachGridPane(Group[][] grp, LevelReader levelObj, GridPane grd, ImageView[][] imgVw, int level) {
        int col = grd.getColumnConstraints().size();
        int row = grd.getRowConstraints().size();

        imgVw = new ImageView[col][row];
        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                if (levelObj.getField()[j][i] != null) {
                    //get the corrent image of the board

                    Image img = new Image(path + getImage(levelObj.getField()[j][i]) + ext);

                    //assign image to image view
                    imgVw[i][j] = new ImageView(img);

                    grp[i][j].setStyle("-fx-background-color:lightgray;");
                    grp[i][j].getChildren().add(imgVw[i][j]);

                    //grd.setBackground(Background.EMPTY);
                    //imgVw[i][j].setBlendMode(BlendMode.MULTIPLY);
                    ImageView imgVwSymbol;
                    if (getBoardObjects(levelObj, i, j) != null) {
                        //Image imgSymbol = new Image(path+getJewelsSymbol(levelObj, i, j)+ext);
                        Image imgSymbol = new Image(path + getBoardObjects(levelObj, i, j) + ext);
                        imgVwSymbol = new ImageView(imgSymbol);
                        imgVwSymbol.opacityProperty().set(0.4);

                    } else {
                        imgVwSymbol = new ImageView();
                    }

                    //Group g = new Group(imgVwSymbol, imgVw[i][j]);
                    grp[i][j].getChildren().add(imgVwSymbol);

                    //assign image view to corresponding gridpane's cell
                    //grd.add(g, i, j);
                    //the image shall resize when the cell resizes
                    imgVw[i][j].fitWidthProperty().bind(grd.widthProperty().divide(col).subtract(grd.getHgap()));
                    imgVw[i][j].fitHeightProperty().bind(grd.heightProperty().divide(row).subtract(grd.getVgap()));

                    imgVwSymbol.fitWidthProperty().bind(grd.widthProperty().divide(col).subtract(grd.getHgap()));
                    imgVwSymbol.fitHeightProperty().bind(grd.heightProperty().divide(row).subtract(grd.getVgap()));
                } else {
                    Pane pn = new Pane();
                    if (level == 1) {
                        pn.setStyle("-fx-background-color:lightblue;");
                    } else if (level == 2) {
                        pn.setStyle("-fx-background-color:Thistle;");
                    } else {
                        pn.setStyle("-fx-background-color:mediumaquamarine;");
                    }
                    grp[i][j].getChildren().add(pn);
                    pn.prefWidthProperty().bind(grd.widthProperty().divide(col).subtract(grd.getHgap()));
                    pn.prefHeightProperty().bind(grd.heightProperty().divide(row).subtract(grd.getVgap()));
                }
            }
        }
        
    }

    /**
     * this method is geting right image based on the given integer number
     *
     * @param img int value on the board
     * @return String the corrent image
     */
    private String getImage(int img) {
        String temp = "";

        if (img == 0) {
            temp = "crossed";
        } else if (img == 1) {
            temp = "bOne";
        } else if (img == 2) {
            temp = "bTwo";
        } else if (img == 3) {
            temp = "bThree";
        } else if (img == 4) {
            temp = "bFour";
        } else if (img == 5) {
            temp = "bFive";
        } else if (img == 6) {
            temp = "bSix";
        } else {
            temp = "planet";
        }

        return temp;
    }

    /**
     * this method is setting the image view to the grid pane.
     *
     * @param imgVws Image of setting on grid pane
     * @param grd Grid pane have the image view
     */
    private void setImgVwToGridPane(ImageView[][] imgVws, GridPane grd) {
        int col = grd.getColumnConstraints().size();
        int row = grd.getRowConstraints().size();

        imgVws = new ImageView[col][row];

        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                imgVws[i][j] = new ImageView();

                grd.add(imgVws[i][j], i, j);

                imgVws[i][j].fitWidthProperty().bind(grd.widthProperty().divide(col).subtract(grd.getHgap()));
                imgVws[i][j].fitHeightProperty().bind(grd.heightProperty().divide(row).subtract(grd.getVgap()));
            }
        }

    }

    @Override
    public void setDicesOnGridPane(List<Integer> list) {
        grdPnDices.getChildren().clear();
        int col = this.grdPnDices.getColumnConstraints().size();
        int row = this.grdPnDices.getRowConstraints().size();
        for (int i = 0; i < list.size(); i++) {
            Image img = new Image(path + getDiceImage(list.get(i)) + ext);
            ImageView imgVw = new ImageView(img);
            grdPnDices.add(imgVw, 0, i);

            imgVw.fitWidthProperty().bind(grdPnDices.widthProperty().divide(col).subtract(grdPnDices.getHgap()));
            imgVw.fitHeightProperty().bind(grdPnDices.heightProperty().divide(row).subtract(grdPnDices.getVgap()));
        }
    }

    private String getDiceImage(int number) {
        String temp = "";

        if (number == 1) {
            temp = "dOne";
        } else if (number == 2) {
            temp = "dTwo";
        } else if (number == 3) {
            temp = "dThree";
        } else if (number == 4) {
            temp = "dFour";
        } else if (number == 5) {
            temp = "dFive";
        } else {
            temp = "dSix";
        }

        return temp;
    }

    private String getJewelsSymbol(LevelReader obj, int x, int y) {
        String s = null;

        for (boardObjects jewel : obj.getJewels()) {
            for (Position pos : jewel.getPositions()) {
                if (pos.getX() == x && pos.getY() == y) {
                    s = getJewel(jewel.getPoints());
                }
            }
        }

        return s;
    }

    private String getJewel(int point) {
        String s = null;
        if (point == 1) {
            s = "jewelBlue";
        } else if (point == 2) {
            s = "jewelYellow";
        } else {
            s = "jewelRed";
        }
        return s;
    }

    private String getBomb(LevelReader obj, int x, int y) {
        String s = null;

        for (Position pos : obj.getBombs().getPositions()) {
            if (pos.getX() == x && pos.getY() == y) {
                s = "bomb";
            }
        }

        return s;
    }

    private String getBoardObjects(LevelReader obj, int x, int y) {
        String s = null;

        s = getBomb(obj, x, y);

        if (s == null) {
            s = getJewelsSymbol(obj, x, y);
        }
        if (s == null) {
            s = getPuzzleSymbols(obj, x, y);
        }
        if (s == null) {
            s = getKeysSymbols(obj, x, y);
        }
        if (s == null) {
            s = getKeyholesSymbols(obj, x, y);
        }
        if (s == null) {
            s = getFlagSymbol(obj, x, y);
        }
        if (s == null) {
            s = getRocketSymbol(obj, x, y);
        }

        return s;
    }

    private String getPuzzleSymbols(LevelReader obj, int x, int y) {
        String s = null;

        for (int i = 0; i < obj.getPuzzles().length; i++) {
            for (int j = 0; j < obj.getPuzzles()[i].getPositions().length; j++) {
                if (obj.getPuzzles()[i].getPositions()[j].getX() == x
                        && obj.getPuzzles()[i].getPositions()[j].getY() == y) {
                    s = getPuzzle(obj.getPuzzles().length, i);
                }
            }
        }

        return s;
    }

    private String getPuzzle(int length, int puzzle) {
        String s = null;

        if (length == 1) {
            s = "puzzleBlue";
        } else {
            if (puzzle == 0) {
                s = "puzzleGreen";
            } else {
                s = "puzzleBlue";
            }
        }
        return s;
    }

    private String getKeysSymbols(LevelReader obj, int x, int y) {
        String s = null;

        for (int i = 0; i < obj.getKeys().length; i++) {
            if (obj.getKeys()[i].getPosition().getX() == x && obj.getKeys()[i].getPosition().getY() == y) {
                s = getKey(i);
            }
        }

        return s;
    }

    private String getKey(int key) {
        String s = null;
        if (key == 0) {
            s = "keyYellow";
        } else {
            s = "keyBlue";
        }
        return s;
    }

    private String getKeyholesSymbols(LevelReader obj, int x, int y) {
        String s = null;

        for (int i = 0; i < obj.getKeys().length; i++) {
            for (int j = 0; j < obj.getKeys()[i].getHoles().length; j++) {
                if (obj.getKeys()[i].getHoles()[j].getX() == x && obj.getKeys()[i].getHoles()[j].getY() == y) {
                    s = getKeyHole(i);
                }
            }

        }
        return s;
    }

    private String getKeyHole(int key) {
        String s = null;
        if (key == 0) {
            s = "keyholeYellow";
        } else {
            s = "keyholeBlue";
        }
        return s;
    }

    private String getFlagSymbol(LevelReader obj, int x, int y) {

        if (obj.getFlag() != null && obj.getFlag().getPosition().getX() == x
                && obj.getFlag().getPosition().getY() == y) {
            return "flagBlue";
        }
        return null;
    }

    private String getRocketSymbol(LevelReader obj, int x, int y) {
        if (obj.getRocket() != null && obj.getRocket().getX() == x
                && obj.getRocket().getY() == y) {
            return "rocket";

        }
        return null;
    }

    @Override
    public void setBtnDisable(boolean value) {
        btnRollAgain.setDisable(value);
        btnDropOut.setDisable(value);
    }

    @Override
    public void setDiceToBoard(int dice, Position pos, int player) {

        int col = getGrdPane(player).getColumnConstraints().size();
        int row = getGrdPane(player).getRowConstraints().size();

        Image img = new Image(path + getDiceImage(dice) + ext);

        ImageView imgVw = new ImageView(img);

        getGrpField(player)[pos.getX()][pos.getY()].getChildren().add(imgVw);

        imgVw.fitWidthProperty().bind(getGrdPane(player).widthProperty().divide(col).subtract(getGrdPane(player).getHgap()));
        imgVw.fitHeightProperty().bind(getGrdPane(player).heightProperty().divide(row).subtract(getGrdPane(player).getVgap()));

    }

    private Group[][] getGrpField(int player) {
        if (player == 0) {
            return grpHuman;
        } else if (player == 1) {
            return grpBot1;
        } else if (player == 2) {
            return grpBot2;
        } else {
            return grpBot3;
        }
    }

    private GridPane getGrdPane(int player) {
        if (player == 0) {
            return grdPnHuman;
        } else if (player == 1) {
            return grdPnBot1;
        } else if (player == 2) {
            return grdPnBot2;
        } else {
            return grdPnBot3;
        }
    }

    @Override
    public void highlightPos(Position pos) {
        //System.out.println(" highlited called" + pos);
        ColorAdjust changeToGreen = new ColorAdjust();
        changeToGreen.setHue(0.75);
        changeToGreen.setSaturation(1.0);
        changeToGreen.setBrightness(0.5);
        addEffectToDominoPos(pos, changeToGreen, grpHuman);

    }

    /**
     * Removes the highlight of a domino position on the game grid. I have got
     * help from last assignment
     *
     * @param pos position of the top-left half of the domino.
     */
    @Override
    public void removeHighlightPos(Position pos) {
        addEffectToDominoPos(pos, null, grpHuman);
    }

    /**
     * add effect to given position with given effect
     *
     * @param pos is the given position to de displayed the effect
     * @param effect is the given effect
     */
    private void addEffectToDominoPos(Position pos, ColorAdjust effect, Group[][] GrdPane) {

        Node result = null;
        for (int i = 0; i < GrdPane.length; i++) {
            for (int j = 0; j < GrdPane[i].length; j++) {

                for (int k = 0; k < GrdPane[i][j].getChildren().size(); k++) {

                    Node child = GrdPane[i][j].getChildren().get(k);
                    if (child.isManaged()) {
//                int rowIndex = GridPane.getRowIndex(child);
//                int ColIndex = GridPane.getColumnIndex(child);
                        //numRows = Math.max(numRows, (rowEnd != GridPane.REMAINING? rowEnd : rowIndex) + 1);
                        if (i == pos.getX() && j == pos.getY()) {
                            result = child;
                            //grdPnHuman.setBackground(Background.EMPTY);
                            //result.setBlendMode(BlendMode.MULTIPLY);
                            result.setEffect(effect);
                            // getCurrPane(0).getChildren().get(i).setEffect(effect);
                            //result.setEffect(new DropShadow(BlurType.GAUSSIAN, Color.rgb(0, 0, 0, 0.26), 5, 0.05, 0, 1));
                            break;
                        }
                    }
                }
                // getImageView(new Position(pos.getX() , pos.getY() + 1), 0).setEffect(effect);
            }
        }
    }
    private void setPenOnBoard(int player) {

        imgVwDropOut.fitWidthProperty().bind(getPaneById(player).widthProperty());
        imgVwDropOut.fitHeightProperty().bind(getPaneById(player).heightProperty());

        //getPaneById(player).setBackground(Background.EMPTY);
        imgVwDropOut.setBlendMode(BlendMode.MULTIPLY);

        getPaneById(player).getChildren().add(imgVwDropOut);
    }

    @Override
    public void showPenOnBoard(int player) {
        setPenOnBoard(player);
    }
    
    @Override
    public void removePenFromBoard(int player) {
        getPaneById(player).getChildren().remove(imgVwDropOut);
    }
    
    private Pane getPaneById(int player){
        if(player == 0){
            return pnHuman;
        }else if(player == 1){
            return pnBot1;
        }else if(player == 2){
            return pnBot2;
        }
        else{
            return pnBot3;
        }
    }
    private void addLines(LevelReader levelObj, int player, int level){
        
        if(player == 0){
            addlinesToPane(player, level, pnHuman, grdPnHuman, levelObj);
        }else if(player == 1){
            addlinesToPane(player, level, pnBot1, grdPnBot1, levelObj);
        }else if(player == 2){
            addlinesToPane(player, level, pnBot2, grdPnBot2, levelObj);
        }else{
            addlinesToPane(player, level, pnBot3, grdPnBot3, levelObj);
        }
        
    }
    private void addlinesToPane(int player, int level, Pane pane, GridPane grdPn, LevelReader levelObj){
        if(level == 1){
            addLineToLevel1(player, pane, grdPn, levelObj);
        }else if(level == 2){
            addLineToLevel2(player, pane, grdPn, levelObj);
        }else{
            addLineToLevel3(player, pane, grdPn, levelObj);
        }
    }
    private void addLineToLevel1(int player, Pane pane, GridPane grdPn, LevelReader levelObj){
        int col = grdPn.getColumnConstraints().size();
        int row = grdPn.getRowConstraints().size();
  
        int cell = (int) grdPn.getHeight() / row;
     
        for(int i = 0; i < levelObj.getHorizontalLines().length; i++){
            Pane pn = new Pane();
           
            getPaneById(player).getChildren().add(pn);
            
            ImageView imgVw = new ImageView();

            imgVw.setImage(new Image(path+"10Right"+ext));
            pn.getChildren().add(imgVw);
            
            pn.setLayoutY((cell) * (levelObj.getHorizontalLines()[i].getPositions()[0].getY()));
            pn.setLayoutX(0);
            
            pn.prefWidthProperty().bind(grdPn.widthProperty().divide(col).subtract(grdPn.getHgap()));
            pn.prefHeightProperty().bind(grdPn.heightProperty().divide(row).subtract(grdPn.getVgap()));
            
            imgVw.fitWidthProperty().bind(pn.widthProperty());
            imgVw.fitHeightProperty().bind(pn.heightProperty());
            
        }
        
        for(int i = 0; i < levelObj.getVerticalLines().length; i++){
            Pane pn = new Pane();
           
            getPaneById(player).getChildren().add(pn);
            Image img = null;
            
            if(levelObj.getVerticalLines()[i].getPoints() == 5){
                img = new Image(path+"5Up"+ext);
            }else{
                img = new Image(path+"10Up"+ext);
            }
            
            
            ImageView imgVw = new ImageView(img);
            
            
            pn.getChildren().add(imgVw);
            
            pn.setLayoutY(grdPn.getHeight());
            pn.setLayoutX(cell + (cell * (levelObj.getVerticalLines()[i].getPositions()[0].getX())));
            
            pn.prefWidthProperty().bind(grdPn.widthProperty().divide(col).subtract(grdPn.getHgap()));
            pn.prefHeightProperty().bind(grdPn.heightProperty().divide(row).subtract(grdPn.getVgap()));
            
            imgVw.fitWidthProperty().bind(pn.widthProperty());
            imgVw.fitHeightProperty().bind(pn.heightProperty());
            
        }
        
    }
    private void addLineToLevel2(int player, Pane pane, GridPane grdPn, LevelReader levelObj){
        int col = grdPn.getColumnConstraints().size();
        int row = grdPn.getRowConstraints().size();
        
         int cell = (int) grdPn.getHeight() / row;
         
         
         for(int i = 0; i < levelObj.getHorizontalLines().length; i++){
            Pane pn = new Pane();
            Image img = null;
            if(levelObj.getHorizontalLines()[i].getPositions()[1].getX() == (col - 1)){
                getPaneById(player).getChildren().add(pn);
                img = new Image(path+"15Right"+ext);
                
                pn.setLayoutY((cell) * (levelObj.getHorizontalLines()[i].getPositions()[0].getY()));
                pn.setLayoutX(0);
            }else{
                getGrpField(player)[levelObj.getHorizontalLines()[i].getPositions()[1].getX()+ 1]
                        [levelObj.getHorizontalLines()[i].getPositions()[1].getY()].getChildren().add(pn);
                img = new Image(path+"5Left"+ext);
            }
            
            ImageView imgVw = new ImageView(img);
            
            pn.getChildren().add(imgVw);

            pn.prefWidthProperty().bind(grdPn.widthProperty().divide(col).subtract(grdPn.getHgap()));
            pn.prefHeightProperty().bind(grdPn.heightProperty().divide(row).subtract(grdPn.getVgap()));
            
            imgVw.fitWidthProperty().bind(pn.widthProperty());
            imgVw.fitHeightProperty().bind(pn.heightProperty());
            
        }
         
         for(int i = 0; i < levelObj.getVerticalLines().length; i++){
            Pane pn = new Pane();
           
            getPaneById(player).getChildren().add(pn);
            
            ImageView imgVw = new ImageView();
            imgVw.setImage(new Image(path+"10Up"+ext));
            
            pn.getChildren().add(imgVw);
            
            pn.setLayoutY(grdPn.getHeight());
            pn.setLayoutX(cell + (cell * (levelObj.getVerticalLines()[i].getPositions()[0].getX())));
            
            pn.prefWidthProperty().bind(grdPn.widthProperty().divide(col).subtract(grdPn.getHgap()));
            pn.prefHeightProperty().bind(grdPn.heightProperty().divide(row).subtract(grdPn.getVgap()));
            
            imgVw.fitWidthProperty().bind(pn.widthProperty());
            imgVw.fitHeightProperty().bind(pn.heightProperty());
            
        }
         
    }
    private void addLineToLevel3(int player, Pane pane, GridPane grdPn, LevelReader levelObj){
        int col = grdPn.getColumnConstraints().size();
        int row = grdPn.getRowConstraints().size();
        
         int cell = (int) grdPn.getHeight() / row;
         
         for(int i = 0; i < levelObj.getHorizontalLines().length; i++){
            Pane pn = new Pane();
            Image img = null;
            if(levelObj.getHorizontalLines()[i].getPositions()[0].getX() == 0 &&
                    levelObj.getHorizontalLines()[i].getPositions()[1].getX() == (col - 1)){
                getPaneById(player).getChildren().add(pn);
                img = new Image(path+"15Right"+ext);
                
                pn.setLayoutY((cell) * (levelObj.getHorizontalLines()[i].getPositions()[0].getY()));
                pn.setLayoutX(0);
            }else{
                if(levelObj.getHorizontalLines()[i].getPositions()[1].getX() != (col - 1)){
                    getGrpField(player)[levelObj.getHorizontalLines()[i].getPositions()[1].getX()+ 1]
                        [levelObj.getHorizontalLines()[i].getPositions()[1].getY()].getChildren().add(pn);
                    if(levelObj.getHorizontalLines()[i].getPositions()[1].getY() == 5){
                        img = new Image(path+"35Right"+ext);
                    }else{
                    img = new Image(path+"5Left"+ext);
                    }
                }
            }
            
            ImageView imgVw = new ImageView(img);
            
            pn.getChildren().add(imgVw);

            pn.prefWidthProperty().bind(grdPn.widthProperty().divide(col).subtract(grdPn.getHgap()));
            pn.prefHeightProperty().bind(grdPn.heightProperty().divide(row).subtract(grdPn.getVgap()));
            
            imgVw.fitWidthProperty().bind(pn.widthProperty());
            imgVw.fitHeightProperty().bind(pn.heightProperty());
            
        }
         
         for(int i = 0; i < levelObj.getVerticalLines().length; i++){
            Pane pn = new Pane();
           
            getPaneById(player).getChildren().add(pn);
            
            ImageView imgVw = new ImageView();
            imgVw.setImage(new Image(path+"10Up"+ext));
            
            pn.getChildren().add(imgVw);
            
            pn.setLayoutY(grdPn.getHeight());
            pn.setLayoutX(cell + (cell * (levelObj.getVerticalLines()[i].getPositions()[0].getX())));
            
            pn.prefWidthProperty().bind(grdPn.widthProperty().divide(col).subtract(grdPn.getHgap()));
            pn.prefHeightProperty().bind(grdPn.heightProperty().divide(row).subtract(grdPn.getVgap()));
            
            imgVw.fitWidthProperty().bind(pn.widthProperty());
            imgVw.fitHeightProperty().bind(pn.heightProperty());
            
        }
        
    }
    private void addHorizontalLines(Pane pane, GridPane grdPn, LevelReader levelObj){
        
    }
    private void addVerticalLines(Pane pane, GridPane grdPn, LevelReader levelObj){
        
    }
    private Pane getPaneWithId(int player){
        if(player == 0){
            return pnHuman;
        }else if(player == 1){
            return pnBot1;
        }else if(player == 2){
            return pnBot2;
        }else{
            return pnBot3;
        }
        
    }
    
    public void clear(){
        clearPanes();
        
        grdPnDices.getChildren().clear();
        
        this.imgVwDropOut = null;
    }
    private void clearPanes(){
        pnHuman.getChildren().clear();
        pnBot1.getChildren().clear();
        pnBot2.getChildren().clear();
        pnBot3.getChildren().clear();
        
        pnHuman.getChildren().add(grdPnHuman);
        pnBot1.getChildren().add(grdPnBot1);
        pnBot2.getChildren().add(grdPnBot2);
        pnBot3.getChildren().add(grdPnBot3);
        
    }
    public void initPointTable(HashMap<logic.ObjectTypes, Integer> points){
        lblPoints = new Label[points.size()];
        int idx = 0;
        for (ObjectTypes key : points.keySet()) {
            System.out.println("key " + key);
            ImageView imgView = null;
            if(key == ObjectTypes.bomb){
                imgView = new ImageView(new Image(path+"exploded"+ext));
            }else{
                imgView = new ImageView(new Image(path+key.toString()+ext));
            }
           imgView.setStyle("-fx-border-color: black");
            grdPnPoints.add(imgView, 0, idx);
            
            lblPoints[idx] = new Label("" + points.get(key));
            
            lblPoints[idx].minWidthProperty().bind(grdPnPoints.widthProperty().divide(3.0).multiply(2.0));
            lblPoints[idx].minHeightProperty().bind(grdPnPoints.heightProperty().divide(
            grdPnPoints.getRowConstraints().size()));
            
            lblPoints[idx].setAlignment(Pos.CENTER);
            lblPoints[idx].setStyle("-fx-font-size: 18px");
            lblPoints[idx].setStyle("-fx-border-color: black");
            
            grdPnPoints.add(lblPoints[idx], 1, idx);
            
            imgView.fitWidthProperty().bind(grdPnPoints.widthProperty().divide(3.0));
            imgView.fitHeightProperty().bind(grdPnPoints.heightProperty().divide(
            grdPnPoints.getRowConstraints().size()));
            
            idx++;
        }
    }
    public void updateScores(logic.ObjectTypes type, int point, int idx){
        
    }
    public void setCrossedPos(Position pos, int player){
        getGrpField(player)[pos.getX()][pos.getY()].getChildren().remove(getGrpField(player)[pos.getX()][pos.getY()].getChildren().size() -1);
        ImageView imgVw = new ImageView(path+"crossed"+ext);
        getGrpField(player)[pos.getX()][pos.getY()].getChildren().add(imgVw);
        
        imgVw.fitWidthProperty().bind(getGrdPane(player).widthProperty().divide(getGrdPane(player).getColumnConstraints().size()).
                subtract(getGrdPane(player).getHgap()));
        imgVw.fitHeightProperty().bind(getGrdPane(player).heightProperty().divide(getGrdPane(player).getRowConstraints().size()).
                subtract(getGrdPane(player).getVgap()));
        
    }
    public void removeDiceFromBoard(Position pos, int player){
        getGrpField(player)[pos.getX()][pos.getY()].getChildren().remove(getGrpField(player)[pos.getX()][pos.getY()].getChildren().size() -1);
    }
}
